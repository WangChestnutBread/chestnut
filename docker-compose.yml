services:
  nginx:
    image : ${DOCKER_IMAGE}:${DOCKER_TAG_FE}-latest
    container_name: ${DOCKER_TAG_FE}
    ports:
      - "80:80"
      - "443:443"
    environment:
      - DOCKER_TAG_BE=${DOCKER_TAG_BE}
      - BACKEND_PORT=${BACKEND_PORT}
      - SERVER_NAME=${SERVER_NAME}
      - CONTEXT_PATH=${CONTEXT_PATH}
    volumes:
      - /home/ubuntu/data/certbot/conf:/etc/letsencrypt
      - /home/ubuntu/data/certbot/www:/var/www/certbot
    networks:
      - backend-network
    depends_on:
      - ${DOCKER_TAG_BE}

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - /home/ubuntu/data/certbot/conf:/etc/letsencrypt
      - /home/ubuntu/data/certbot/www:/var/www/certbot
    depends_on:
      - nginx
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew --webroot -w /var/www/certbot --deploy-hook \"docker-compose exec nginx nginx -s reload\"; sleep 60d & wait $${!}; done;'"

  springboot:
    image: ${DOCKER_IMAGE}:${DOCKER_TAG_BE}-latest
    container_name: ${DOCKER_TAG_BE}
    environment:
      - PROFILES_ACTIVE=${PROFILES_ACTIVE}
      - BACKEND_PORT=${BACKEND_PORT}
      - CONTEXT_PATH=${CONTEXT_PATH}
      - MYSQL_URL=${MYSQL_URL}
      - MYSQL_ROOT_USERNAME=${MYSQL_ROOT_USERNAME}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - CLOVA_SPEECH_INVOKE_URL=${CLOVA_SPEECH_INVOKE_URL}
      - CLOVA_SPEECH_SECRET=${CLOVA_SPEECH_SECRET}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    expose:
      - ${BACKEND_PORT}
    networks:
      - backend-network
    depends_on:
      - mysql
      - redis

  mysql:
    image: mysql:8.0
    container_name: MySQL-8.0
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "${MYSQL_BINDING_PORT}:3306"
    networks:
      - backend-network

  redis:
    image: redis:latest
    container_name: my-redis
    volumes:
      - redis_data:/data
      - ${REDIS_DEFAULT_CONFIG_FILE}:/usr/local/etc/redis/redis.conf
    ports:
      - "${REDIS_BINDING_PORT}:6379"
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - backend-network

volumes:
  mysql_data:
    external: true
  redis_data:
    external: true

networks:
  backend-network:
    name: backend-network
    driver: bridge